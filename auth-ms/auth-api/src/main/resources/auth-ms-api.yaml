openapi: 3.0.3
info:
  title: CoreMs Auth Service API
  description: |
    The Authentication Service API allows users to verify the identity of a user.
    In response user gets access JWT token. 
    
    Authentication service provides oauth2 authentication/registration via popular providers +  JWT Authentication with user login password.
  version: 1.0.0
tags:
  - name: Authentication
  - name: User
paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login to with email and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'

      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'

  /api/auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh Token
      operationId: refreshToken

      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterNewUserRequest'

      responses:
        '200':
          description: User info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulResponse'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'

  /api/user/me:
    get:
      tags:
        - User
      summary: Returns current logged user info model
      operationId: currentUserInfo

      responses:
        '200':
          description: User info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'

        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: The user's email address
          example: user@example.com
        password:
          type: string
          description: The user's password
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$'
          example: StrongPass1!

    RegisterNewUserRequest:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        email:
          type: string
          format: email
          description: The user's email address
          example: user@example.com
        password:
          type: string
          description: The user's password
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$'
          format: password
          example: StrongPass1!
        confirmPassword:
          type: string
          description: Confirmation of the user's password, should match the password field
          minLength: 8
          maxLength: 128
          example: StrongPass1!
        imageUrl:
          type: string
          format: uri
          description: Optional URL to the user's profile image
          example: https://example.com/images/johndoe.jpg
      required:
        - email
        - password
        - confirmPassword
        - firstName
        - lastName

    UserInfo:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 2a3e0b5c-2192-4612-9e02-693989dbb7e5
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
        imageUrl:
          type: string
          description: Optional URL to the user's profile image
          example: https://example.com/images/johndoe.jpg

    AccessTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: The JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

    SuccessfulResponse:
      type: object
      properties:
        result:
          type: boolean
          description: Operation result
          example: true

    Error:
      type: object
      properties:
        ReasonCode:
          type: string
          description: Reason code for the error
        Description:
          type: string
          description: Description of the error
        Details:
          type: string
          description: Details of the error
      required:
        - ReasonCode
        - Description
        - Details

    ErrorList:
      type: array
      items:
        $ref: '#/components/schemas/Error'

    ErrorWrapper:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ErrorList'
      required:
        - errors

